name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:
    branches:
      - main
      - SM-*

env:
  IMAGE_NAME: core-website

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: test

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # TODO: switch based on version and "latest" whether it goes to github packages or private registry
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  deploy:
    runs-on: ubuntu-latest
    needs: push
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCTL_TOKEN }}
      - name: Kubectl install
        uses: Azure/setup-kubectl@v1
      - name: Deploy to development
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          cat << EOF > deploy.yaml
          apiVersion: extensions/v1beta1
          kind: Ingress
          metadata:
            name: ${{ secrets.DEPLOYMENT_SLUG }}-ingress
            annotations:
              nginx.ingress.kubernetes.io/enable-cors: "true"
              nginx.ingress.kubernetes.io/cors-allow-methods: "PUT, GET, POST, OPTIONS"
              nginx.ingress.kubernetes.io/cors-allow-origin: "*"
              nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
              cert-manager.io/cluster-issuer: "letsencrypt-prod"
          spec:
            rules:
            - host: api.outof.coffee
              http:
                paths:
                - backend:
                    serviceName: raisingable-development
                    servicePort: 80
            tls:
            - secretName: raisingable-development-cert
              hosts:
                - api.outof.coffee
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: raisingable-development
          spec:
            ports:
            - port: 80
              targetPort: 8080
            selector:
              app: raisingable-development
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: raisingable-development
          spec:
            selector:
              matchLabels:
                app: raisingable-development
            replicas: 1
            template:
              metadata:
                labels:
                  app: raisingable-development
              spec:
                containers:
                - name: raisingable-development
                  image: docker.pkg.github.com/raisingable/www/core-website:$VERSION
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 8080
          EOF
          doctl kubernetes cluster kubeconfig save ${{ secrets.DEPLOYMENT_CLUSTER }}
          kubectl apply --validate=true --filename=deploy.yaml

